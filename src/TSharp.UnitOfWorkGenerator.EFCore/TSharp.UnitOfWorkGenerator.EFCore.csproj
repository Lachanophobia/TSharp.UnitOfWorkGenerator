<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <LangVersion>latest</LangVersion>    
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild> <!-- Generates a package at build -->
    <IncludeBuildOutput>false</IncludeBuildOutput> <!-- Do not include the generator as a lib dependency -->
	  <IsRoslynComponent>true</IsRoslynComponent>
	  <BuildOutputTargetFolder>analyzers</BuildOutputTargetFolder>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.1.0" PrivateAssets="all" />
	  <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3">
		  <PrivateAssets>all</PrivateAssets>
		  <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
	  </PackageReference>
  </ItemGroup>

 <PropertyGroup>
    <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    <Authors>Thomas Kassos</Authors>
      <Description>UnitOfWorkGenerator is a source generator. It runs during compilation, inspects your program for your dbContext Entities and produces the Repositories, the IRepositories, the UnitOfWork and the IUnitOfWork which are injected to your dll of the project you have installed the UnitOfWorkGenerator.
       You will need to install the TSharp.UnitOfWorkGenerator.EFCore.Utils as well, please visiti the project site for the detailed documentation.</Description>
    <PackageProjectUrl>https://github.com/Lachanophobia/TSharp.UnitOfWorkGenerator.EFCore</PackageProjectUrl>
    <RepositoryUrl>https://github.com/Lachanophobia/TSharp.UnitOfWorkGenerator.EFCore</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>SourceGenerator;Generator;Repository;RepositoryPattern;UnitOfWork</PackageTags>
    <NeutralLanguage>en</NeutralLanguage>
    <AssemblyVersion>2.0.3</AssemblyVersion>
    <FileVersion>2.0.3</FileVersion>
    <Version>2.0.6-rc</Version>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReleaseNotes></PackageReleaseNotes>
    <PackageIcon>uow-icon.png</PackageIcon>
  </PropertyGroup>

  <Target Name="GetDependencyTargetPaths">
    <ItemGroup>
      <TargetPathWithTargetPlatformMoniker Include="$(PKGNewtonsoft_Json)\lib\netstandard2.0\Newtonsoft.Json.dll" IncludeRuntimeDependency="false" />
    </ItemGroup>
  </Target>

  <ItemGroup>
    <!-- Take a private dependency on Newtonsoft.Json (PrivateAssets=all) Consumers of this generator will not reference it.
         Set GeneratePathProperty=true so we can reference the binaries via the PKGNewtonsoft_Json property -->
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" GeneratePathProperty="true" PrivateAssets="all" />

    <!-- Package the generator in the analyzer directory of the nuget package -->
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    <None Include="..\..\docs\uow-icon.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>

    <!-- Package the Newtonsoft.Json dependency alongside the generator assembly -->
    <None Include="$(PkgNewtonsoft_Json)\lib\netstandard2.0\*.dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

</Project>